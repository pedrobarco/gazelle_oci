package oci

import (
	"fmt"
	"log"

	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/label"
	"github.com/bazelbuild/bazel-gazelle/language"
	"github.com/bazelbuild/bazel-gazelle/rule"
	myrule "github.com/pedrobarco/gazelle_oci/internal/rule"
)

var kinds = map[string]rule.KindInfo{
	"pkg_tar": {
		NonEmptyAttrs:  map[string]bool{"srcs": true},
		MergeableAttrs: map[string]bool{"srcs": true},
	},
	"oci_image": {
		NonEmptyAttrs:  map[string]bool{"tars": true, "base": true, "entrypoint": true},
		MergeableAttrs: map[string]bool{"tars": true},
	},
	"platform_transition_filegroup": {
		NonEmptyAttrs:  map[string]bool{"srcs": true},
		MergeableAttrs: map[string]bool{"srcs": true, "target_platfrom": true},
	},
	"oci_tarball": {
		NonEmptyAttrs:  map[string]bool{"image": true},
		MergeableAttrs: map[string]bool{"repo_tags": true},
	},
}

type ociImageLang struct{}

var _ language.Language = (*ociImageLang)(nil)
var _ language.ModuleAwareLanguage = (*ociImageLang)(nil)

func NewLanguage() language.Language {
	return &ociImageLang{}
}

// Kinds returns a map of maps rule names (kinds) and information on how to
// match and merge attributes that may be found in rules of those kinds. All
// kinds of rules generated for this language may be found here.
func (e *ociImageLang) Kinds() map[string]rule.KindInfo {
	return kinds
}

// GenerateRules extracts build metadata from source files in a directory.
// GenerateRules is called in each directory where an update is requested
// in depth-first post-order.
//
// args contains the arguments for GenerateRules. This is passed as a
// struct to avoid breaking implementations in the future when new
// fields are added.
//
// A GenerateResult struct is returned. Optional fields may be added to this
// type in the future.
//
// Any non-fatal errors this function encounters should be logged using
// log.Print.
func (e *ociImageLang) GenerateRules(args language.GenerateArgs) language.GenerateResult {
	if args.File == nil {
		return language.GenerateResult{}
	}

	cfg := getOciConfig(args.Config)
	result := language.GenerateResult{}

	for _, r := range args.OtherGen {
		switch r.Kind() {
		case "go_binary":
			layer := rule.NewRule("pkg_tar", r.Name()+"_layer")
			layer.SetAttr("srcs", []string{":" + r.Name()})
			result.Gen = append(result.Gen, layer)
			result.Imports = append(result.Imports, struct{}{})

			base := cfg.GetBaseImage("go")
			if label.NoLabel.Equal(base) {
				log.Fatalf("failed to get base image for go")
			}

			image := rule.NewRule("oci_image", "image")
			image.SetAttr("base", base.String())
			image.SetAttr("entrypoint", []string{"/" + r.Name()})
			image.SetAttr("tars", []string{":" + layer.Name()})
			result.Gen = append(result.Gen, image)
			result.Imports = append(result.Imports, struct{}{})

			rulesGoRepoName := cfg.GetRepoName("rules_go")

			transition := rule.NewRule("platform_transition_filegroup", "transitioned_image")
			transition.SetAttr("srcs", []string{":" + image.Name()})
			transition.SetAttr("target_platform", myrule.SelectToolchain{
				"@platforms//cpu:arm64":  "@" + rulesGoRepoName + "//go/toolchain:linux_arm64",
				"@platforms//cpu:x86_64": "@" + rulesGoRepoName + "//go/toolchain:linux_amd64",
			})
			result.Gen = append(result.Gen, transition)
			result.Imports = append(result.Imports, struct{}{})

			tarball := rule.NewRule("oci_tarball", "tarball")
			tarball.SetAttr("image", ":"+transition.Name())
			// TODO: support directive to configure registry path and repo tags
			tarball.SetAttr("repo_tags", []string{r.Name() + ":latest"})
			result.Gen = append(result.Gen, tarball)
			result.Imports = append(result.Imports, struct{}{})
		default:
			continue
		}
	}

	return result
}

// Loads returns .bzl files and symbols they define. Every rule generated by
// GenerateRules, now or in the past, should be loadable from one of these
// files.
//
// Deprecated: Implement ModuleAwareLanguage's ApparentLoads.
func (e *ociImageLang) Loads() []rule.LoadInfo {
	panic("ApparentLoads should be called instead")
}

// Fix repairs deprecated usage of language-specific rules in f. This is
// called before the file is indexed. Unless c.ShouldFix is true, fixes
// that delete or rename rules should not be performed.
func (e *ociImageLang) Fix(c *config.Config, f *rule.File) {}

// ApparentLoads returns .bzl files and symbols they define. Every rule
// generated by GenerateRules, now or in the past, should be loadable from
// one of these files.
//
// The moduleToApparentName argument is a function that resolves a given
// Bazel module name to the apparent repository name configured for this
// module in the MODULE.bazel file, or the empty string if there is no such
// module or the MODULE.bazel file doesn't exist. Languages should use the
// non-empty value returned by this function to form the repository part of
// the load statements they return and fall back to using the legacy
// WORKSPACE name otherwise.
//
// See https://bazel.build/external/overview#concepts for more information
// on repository names.
//
// Example: For a project with these lines in its MODULE.bazel file:
//
//	bazel_dep(name = "rules_go", version = "0.38.1", repo_name = "my_rules_go")
//	bazel_dep(name = "gazelle", version = "0.27.0")
//
// moduleToApparentName["rules_go"] == "my_rules_go"
// moduleToApparentName["gazelle"] == "gazelle"
// moduleToApparentName["foobar"] == ""
func (*ociImageLang) ApparentLoads(moduleToApparentName func(string) string) []rule.LoadInfo {
	rulesOci := moduleToApparentName("rules_oci")
	if rulesOci == "" {
		rulesOci = "rules_oci"
	}

	aspectBazelLib := moduleToApparentName("aspect_bazel_lib")
	if aspectBazelLib == "" {
		aspectBazelLib = "aspect_bazel_lib"
	}

	rulesPkg := moduleToApparentName("rules_pkg")
	if rulesPkg == "" {
		rulesPkg = "rules_pkg"
	}

	return []rule.LoadInfo{
		{
			Name:    fmt.Sprintf("@%s//lib:transitions.bzl", aspectBazelLib),
			Symbols: []string{"platform_transition_filegroup"},
		},
		{
			Name:    fmt.Sprintf("@%s//oci:defs.bzl", rulesOci),
			Symbols: []string{"oci_image", "oci_tarball"},
		},
		{
			Name:    fmt.Sprintf("@%s//pkg:tar.bzl", rulesPkg),
			Symbols: []string{"pkg_tar"},
		},
	}
}
